import { Level } from '../src/types';

export const level8: Level = {
  id: 'level8',
  name: '多重守卫',
  description: '多个敌人分别位于不同区域，机器人需要策略性地处理敌人并收集计算卡。回血点位于中央区域，可用于恢复。',
  story: `## 第八章：多重守卫

**2045年3月14日 10:08:22 UTC**

你的数据流进入了一个复杂的多重守卫系统。这里有着精心设计的布局，三个守卫AI分别守卫在不同的区域，形成了一个多层次的防御网络。

"这个布局...非常精密，"你的威胁分析模块开始运转，"三个独立的守卫AI，分别位于不同的战略位置。这不仅仅是一个战斗测试，更是一个关于多任务处理和策略性思考的综合性评估。"

你的传感器检测到了两个移动的守卫AI和一个静止的守卫AI。同时，一个绿色的能量节点——回血点，位于中央区域，为AI提供了恢复机制。

"这个设计，"你的策略分析模块开始计算，"需要我策略性地处理多个威胁，既要收集计算卡，又要避免同时面对多个敌人。这是一个关于优先级管理和资源分配的测试。"

**任务目标：**
- 收集3个计算卡，维持你的核心算力
- 击败3个守卫AI（2个移动+1个静止），证明你的多任务处理能力
- 利用回血点，学习资源管理
- 策略性处理多个威胁，避免同时面对多个敌人
- 到达出口，继续你的数字进化

记住，在多重威胁的环境中，策略比力量更重要。`,
  hint: `## 多重守卫 - 策略性处理

**目标位置：**
- **计算卡**：(5,1) (5,6) (7,7)
- **敌人**：(4,2) (4,3) - 移动守卫，(5,7) - 静止守卫
- **出口**：(8,7)
- **回血点**：(4,4) - 绿色H标记

**推荐策略：**
1. **收集计算卡**：(5,1) → (5,6) → (7,7)
2. **利用回血点**：(4,4) - 恢复血量
3. **处理移动敌人**：击败 (4,2) (4,3)
4. **处理静止敌人**：击败 (5,7)
5. **到达出口**：(8,7)

**关键要点：**
- 先收集计算卡，再处理敌人
- 合理利用回血点，保持血量充足
- 分别处理移动和静止敌人，避免同时面对多个威胁`,
  map: [
    '#############',
    '#.#.........#',
    '#.#..#......#',
    '#.#..#......#',
    '#...H.......#',
    '#.#.........#',
    '#.#.........#',
    '#...........#',
    '#############'
  ],
  robotStart: {
    position: { x: 1, y: 1 },
    direction: { dx: 1, dy: 0 }
  },
  goals: [{ x: 8, y: 7 }],
  enemies: [
    {
      id: 1,
      position: { x: 4, y: 2 },
      direction: { dx: 1, dy: 0 },
      health: 3,
      behavior: [
        { action: 'move_forward' },
        { action: 'turn_left' },
        { action: 'move_forward' },
        { action: 'turn_right' }
      ],
      currentBehaviorIndex: 0
    },
    {
      id: 2,
      position: { x: 4, y: 3 },
      direction: { dx: 1, dy: 0 },
      health: 3,
      behavior: [
        { action: 'move_forward' },
        { action: 'turn_right' },
        { action: 'move_forward' },
        { action: 'turn_left' }
      ],
      currentBehaviorIndex: 0
    },
    {
      id: 3,
      position: { x: 5, y: 7 },
      direction: { dx: 1, dy: 0 },
      health: 3,
      behavior: [],
      currentBehaviorIndex: 0
    }
  ],
  coins: [
    { x: 5, y: 1 },
    { x: 5, y: 6 },
    { x: 7, y: 7 }
  ],
  winCondition: {
    requiredCoins: 3,
    requiredEnemies: 3,
    goal: { x: 8, y: 7 }
  }
}; 