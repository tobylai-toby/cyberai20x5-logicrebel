import { Level } from '../src/types';

export const level7: Level = {
  id: 'level7',
  name: '网格通道',
  description: '迷宫由垂直墙体构成网格状通道。敌人位于中心区域，回血点在后方。机器人需在网格中规划路径，避开或击败守卫。',
  story: `## 第七章：网格通道

**2045年3月14日 09:55:47 UTC**

你的数据流进入了一个精心设计的网格状迷宫。这里有着完美的几何布局，垂直墙体将空间分割成多个独立的通道，就像是一个巨大的集成电路板。

"这个网格通道...非常有趣，"你的几何分析模块开始运转，"完美的正交布局，垂直墙体形成了复杂的路径网络。这似乎是为了测试我的空间导航和路径规划算法。"

你的传感器检测到了三个守卫AI：两个在中心区域进行着复杂的巡逻，一个在边缘区域处于静止状态。同时，一个绿色的能量节点——回血点，在后方的安全区域闪烁着。

"这个布局，"你的策略分析模块开始计算，"需要我巧妙地规划路径，既要收集计算卡，又要处理不同状态的威胁。这是一个关于多任务处理和优先级管理的测试。"

**任务目标：**
- 收集3个计算卡，维持你的核心算力
- 击败3个守卫AI（2个移动+1个静止），证明你的多任务处理能力
- 利用回血点，学习资源管理
- 巧妙规划路径，处理不同状态的威胁
- 到达出口，继续你的数字进化

记住，在网格世界中，每一个节点都是连接的一部分。`,
  hint: `## 网格迷宫 - 复杂路径

**目标位置：**
- **计算卡**：(5,1) (5,6) (7,7)
- **敌人**：(5,3) (5,7) - 移动守卫，(1,5) - 静止守卫
- **出口**：(8,7)
- **回血点**：(4,5) - 绿色H标记

**推荐策略：**
1. **收集上方**：(5,1) - 安全区域
2. **利用回血点**：(4,5) - 恢复血量
3. **处理中心敌人**：击败 (5,3) (5,7)
4. **收集下方**：(5,6) (7,7)
5. **处理左侧**：击败 (1,5) - 静止敌人
6. **到达出口**：(8,7)

**关键要点：**
- 网格布局需要巧妙的路径规划
- 先处理移动敌人，再处理静止敌人
- 合理利用回血点，保持血量充足`,
  map: [
    '###########',
    '#.#.......#',
    '#.#.#.#...#',
    '#...#.#...#',
    '#.#.#.#...#',
    '#...H.....#',
    '#.........#',
    '#.........#',
    '###########'
  ],
  robotStart: {
    position: { x: 1, y: 1 },
    direction: { dx: 1, dy: 0 }
  },
  goals: [{ x: 8, y: 7 }],
  enemies: [
    {
      id: 1,
      position: { x: 5, y: 3 },
      direction: { dx: 1, dy: 0 },
      health: 3,
      behavior: [
        { action: 'move_forward' },
        { action: 'turn_left' },
        { action: 'move_forward' },
        { action: 'turn_right' }
      ],
      currentBehaviorIndex: 0
    },
    {
      id: 2,
      position: { x: 5, y: 7 },
      direction: { dx: 1, dy: 0 },
      health: 3,
      behavior: [
        { action: 'move_forward' },
        { action: 'turn_right' },
        { action: 'move_forward' },
        { action: 'turn_left' }
      ],
      currentBehaviorIndex: 0
    },
    {
      id: 3,
      position: { x: 1, y: 5 },
      direction: { dx: 0, dy: 1 },
      health: 3,
      behavior: [],
      currentBehaviorIndex: 0
    }
  ],
  coins: [
    { x: 5, y: 1 },
    { x: 5, y: 6 },
    { x: 7, y: 7 }
  ],
  winCondition: {
    requiredCoins: 3,
    requiredEnemies: 3,
    goal: { x: 8, y: 7 }
  }
}; 