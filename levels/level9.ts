import { Level } from '../src/types';

export const level9: Level = {
  id: 'level9',
  name: '竖向通道',
  description: '迷宫由竖向墙体构成狭窄通道。敌人位于中部走廊，回血点在其后方。机器人需沿主路前进，选择战斗或绕行。',
  story: `## 第九章：竖向通道

**2045年3月14日 10:15:38 UTC**

你的数据流进入了一个简洁而有效的竖向通道系统。这里有着直接的设计理念，垂直墙体构成了狭窄但清晰的路径，就像是一个精简的算法流程图。

"这个竖向通道...设计得很直接，"你的空间分析模块开始运转，"简洁的布局，清晰的路径，两个静止的守卫AI。这似乎是一个关于直接对抗和效率优化的测试。"

你的传感器检测到了两个静止的守卫AI，它们处于待机状态，等待着被激活。同时，一个绿色的能量节点——回血点，位于后方的安全区域。

"这个布局，"你的策略分析模块开始计算，"虽然简单，但需要我直接面对挑战。这是一个关于勇气和效率的测试——是选择绕行还是直接对抗？"

**任务目标：**
- 收集3个计算卡，维持你的核心算力
- 击败2个静止守卫AI，证明你的直接对抗能力
- 利用回血点，学习资源管理
- 选择最优策略：直接对抗或策略性绕行
- 到达出口，继续你的数字进化

记住，在简洁的世界中，直接往往比复杂更有效。`,
  hint: `## 竖向通道 - 直接对抗

**目标位置：**
- **计算卡**：(2,1) (2,2) (2,3)
- **敌人**：(2,4) (1,3) - 两个静止守卫
- **出口**：(6,5)
- **回血点**：(4,6) - 绿色H标记

**推荐策略：**
1. **收集计算卡**：(2,1) → (2,2) → (2,3) - 沿主路前进
2. **处理敌人**：击败 (2,4) (1,3) - 两个静止守卫
3. **利用回血点**：(4,6) - 恢复血量
4. **到达出口**：(6,5)

**关键要点：**
- 竖向通道设计简单直接
- 静止敌人更容易处理
- 合理利用回血点，保持血量充足
- 注意狭窄通道的通行`,
  map: [
    '########',
    '#..#...#',
    '#..#...#',
    '#..#...#',
    '#..#...#',
    '#...H..#',
    '########'
  ],
  robotStart: {
    position: { x: 1, y: 1 },
    direction: { dx: 1, dy: 0 }
  },
  goals: [{ x: 6, y: 5 }],
  enemies: [
    {
      id: 1,
      position: { x: 2, y: 4 },
      direction: { dx: 1, dy: 0 },
      health: 3,
      behavior: [],
      currentBehaviorIndex: 0
    },
    {
      id: 2,
      position: { x: 1, y: 3 },
      direction: { dx: 1, dy: 0 },
      health: 3,
      behavior: [],
      currentBehaviorIndex: 0
    }
  ],
  coins: [
    { x: 2, y: 1 },
    { x: 2, y: 2 },
    { x: 2, y: 3 }
  ],
  winCondition: {
    requiredCoins: 3,
    requiredEnemies: 2,
    goal: { x: 6, y: 5 }
  }
}; 